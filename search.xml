<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>[Spring] Spring IOC初始化源码分析（一） - singleton循环引用问题分析</title>
      <link href="/2018/09/06/Spring%20IOC%E5%88%9D%E5%A7%8B%E5%8C%96%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%20-%20singleton%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
      <url>/2018/09/06/Spring%20IOC%E5%88%9D%E5%A7%8B%E5%8C%96%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%20-%20singleton%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>假设有两个对象A和B，A在初始化过程中引用B，B在初始化过程中引用A，其中一种方式是在构造器中的循环引用，即在A的构造器中将传入的B实例赋值给A.b，在B的构造器中将传入的A实例赋值给B.a， 另外一种是在构造器外进行循环引用，等构造器初始完成之后，通过属性设置方式进行引用赋值。那spring是否支持这两种场景循环引用？如果支持，是如何实现的呢？</p><h2 id="构造器循环引用"><a href="#构造器循环引用" class="headerlink" title="构造器循环引用"></a>构造器循环引用</h2><p>首先看如下代码：   </p><pre><code>public class A{    private B b;    public A(B b){        this.b = b;    }}public class B{    private A a;    public B(A a){        this.a = a;    }}</code></pre><p>对应的bean配置文件如下（这里采用ClasspathXmlApplicationContext容器）：    </p><pre><code>&lt;bean id=&quot;a&quot; class=&quot;net.gocody.demo.service.A&quot;&gt;   &lt;constructor-arg  ref=&quot;b&quot;&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;&lt;bean id=&quot;b&quot; class=&quot;net.gocody.demo.service.B&quot;&gt;    &lt;constructor-arg  ref=&quot;a&quot;&gt;&lt;/constructor-arg&gt;&lt;/bean&gt; </code></pre><h3 id="猜想："><a href="#猜想：" class="headerlink" title="猜想："></a>猜想：</h3><p>初始化A时（通过调用A构造器），发现此时A引用了单例b，所以bean factory尝试去获取单例b，但发现单例b没有初始化，因此调用B构造器进行实例化，不巧的是实例化过程发现也依赖单例a，因此bean factory又尝试去从bean factory获取单例a，最终形成一个死循环。</p><h3 id="spring处理过程："><a href="#spring处理过程：" class="headerlink" title="spring处理过程："></a>spring处理过程：</h3><p>但实际上当spring容器启动时，会报<strong>Requested bean is currently in creation: Is there an unresolvable circular reference?</strong> ，从异常信息得知，spring判断出来初始化过程发生了循环引用，但spring是如何设计的？  </p><p>查看spring ioc源码得知，以上两个bean初始化过程如下：</p><ul><li>初始化A  - 标记bean A状态为创建中（通过将A的bean name添加至singletonsCurrentlyInCreation），尝试通过指定的构造器去实例化A，但发现构造器的参数引用了类型B的实例b，此时A未完成构造器实例化，也不会存在实例化的对象存在三级缓存中（singletonFactories）</li><li>初始化A构造器中参数b（注入过程）-  尝试通过bean factory去获取类型B的实例，此时bean factory未缓存B实例</li><li>初始化B  - 和初始化A的过程一样</li><li><p>初始化B构造器中参数a（注入过程） - 尝试通过bean factory去获取类型A的实例，发现A已经在创建中(singletonsCurrentlyInCreation中已经存在A的bean name)，此时spring则认为是一个循环引用，直接中止启动，判断代码如下：  </p><pre><code>protected void beforeSingletonCreation(String beanName) {    if (!this.inCreationCheckExclusions.contains(beanName) &amp;&amp;  !this.singletonsCurrentlyInCreation.add(beanName) ) {        throw new BeanCurrentlyInCreationException(beanName);    }}</code></pre></li></ul><p><strong>结论：spring不支持构造器循环引用</strong></p><h2 id="属性循环引用"><a href="#属性循环引用" class="headerlink" title="属性循环引用"></a>属性循环引用</h2><p>首先看如下代码：     </p><pre><code>public class A{    private B b;    public void setB(B b){        this.b = b;    }}public class B{    private A a;    public void setA(A a){        this.a = a;    }}</code></pre><p>对应的bean配置文件如下（这里采用ClasspathXmlApplicationContext容器）：    </p><pre><code>&lt;bean id=&quot;a&quot; class=&quot;net.gocody.demo.service.A&quot;&gt;    &lt;property name=&quot;b&quot; ref=&quot;b&quot;/&gt;&lt;/bean&gt;&lt;bean id=&quot;b&quot; class=&quot;net.gocody.demo.service.B&quot;&gt;    &lt;property name=&quot;a&quot; ref=&quot;a&quot;/&gt;&lt;/bean&gt;</code></pre><h3 id="spring处理过程：-1"><a href="#spring处理过程：-1" class="headerlink" title="spring处理过程："></a>spring处理过程：</h3><p>和构造器循环引用不同的是，以上两个bean初始化过程如下：    </p><ul><li>初始化A - 标记bean A状态为创建中（通过将A的bean name添加至singletonsCurrentlyInCreation），同时通过默认构造器实例化A，并将实例化的对象加入到单例的三级缓存中（singletonFactories）</li><li>初始化A属性b（注入过程）-  尝试通过bean factory去获取类型B的实例，此时bean factory未缓存B实例</li><li>初始化B - 和初始化A的过程一样</li><li>初始化B属性a（注入过程）-  尝试通过bean factory去获取类型A的实例，从三级缓存（singletonFactories）中获取a实例的objectFactory对象，并将a实例的objectFactory对象从三级缓存中移除，并将实例a添加至二级缓存（earlySingletonObjects）；同时将依赖关系缓存至dependentBeanMap (b -&gt; a)，填充上面步骤获取的实例a</li><li>完成初始化B  - 执行后续初始化相关步骤（如aware接口，init方法，初始化完成后的post process）。最后将实例b添加至一级缓存（singletonObjects），并从三级和二级缓存中移除</li><li>初始化A属性b（继续注入过程） - 将依赖关系缓存至dependentBeanMap（a -&gt; b），填充刚刚初始化完成的实例b</li><li>完成初始化A  - 执行后续初始化相关步骤（如aware接口，init方法，初始化完成后的post process）。最后将实例a添加至一级缓存（singletonObjects），并从三级和二级缓存中移除</li></ul><h2 id="附录：单例三级缓存源码"><a href="#附录：单例三级缓存源码" class="headerlink" title="附录：单例三级缓存源码"></a>附录：单例三级缓存源码</h2><pre><code>protected Object getSingleton(String beanName, boolean allowEarlyReference) {    Object singletonObject = this.singletonObjects.get(beanName);    if (singletonObject == null &amp;&amp; isSingletonCurrentlyInCreation(beanName)) {        synchronized (this.singletonObjects) {            singletonObject = this.earlySingletonObjects.get(beanName);            if (singletonObject == null &amp;&amp; allowEarlyReference) {                ObjectFactory&lt;?&gt; singletonFactory = this.singletonFactories.get(beanName);                if (singletonFactory != null) {                    singletonObject = singletonFactory.getObject();                    this.earlySingletonObjects.put(beanName, singletonObject);                    this.singletonFactories.remove(beanName);                }            }        }    }    return singletonObject;}</code></pre>]]></content>
      
      <categories>
          
          <category> Spring IOC初始化源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring IOC </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Java] JVM系列之常用垃圾回收算法</title>
      <link href="/2018/08/21/JVM%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/"/>
      <url>/2018/08/21/JVM%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>做java的同学最常听见的就是java虚拟机里面的垃圾回收机制，其实垃圾回收的概念最先并不是java里首先提出来的，垃圾回收这个概念很早就已经被提出来了，并且在其他语言中得到广泛的应用，本篇文章将对市面上常用JVM中采用的垃圾回收算法进行介绍</p></blockquote><h1 id="常用垃圾回收算法"><a href="#常用垃圾回收算法" class="headerlink" title="常用垃圾回收算法"></a>常用垃圾回收算法</h1><h3 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记 - 清除"></a>标记 - 清除</h3><hr><blockquote><p>这个方法将垃圾回收分为两个阶段：标记和清除</p><p>在标记阶段，通过”GC Root”根对象，标记所有从根节点开始可达到的对象，那么未标记的对象就是未被引用的垃圾对象，在清除阶段，清除掉所有未被标记的对象，清除后会产生内存碎片，空间碎片过多时，当需要分配大片连续空间而无法找到时，将不得不提前触发一次另外一次垃圾回收动作</p></blockquote><hr><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><hr><blockquote><p>它将可用内存按容量划分为大小相等的两块，每次只使用其中一块。当这一块的内存使用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次性清除掉，这样使得每次都是对整个半区进行内存回收，内存分配时也不用考虑内存碎片等情况，实现简单，运行高效，但代价是内存的使用率将变为原来一半，造成空间浪费</p></blockquote><hr><h3 id="标记-整理"><a href="#标记-整理" class="headerlink" title="标记 - 整理"></a>标记 - 整理</h3><hr><blockquote><p>标记过程仍然与“标记 - 清除”算法一样，但后续步骤不是直接对可回收对象进行清除，而是让存活的对象向一边移动，然后直接清除掉端边界以外的内存</p></blockquote><hr><h3 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h3><hr><blockquote><p>当前商业虚拟机的垃圾收集都采用“分代收集”算法，根据对象存活周期的不同将内存划分为几块。一般是把堆划分为新生代和老年代，这样可以根据各个年代的特点适用不同的收集算法。在新生代中，每次垃圾收集时都有大量对象死去，只有少量存活，可以采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；而老年代中对象存活率高，同时也没有额外的空间进行担保，就必须使用“标记 - 清除”或“标记 - 整理”算法进行回收。</p></blockquote><hr>]]></content>
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
            <tag> 垃圾回收 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
